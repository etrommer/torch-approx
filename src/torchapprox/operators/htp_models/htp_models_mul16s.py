# pylint: disable=duplicate-code
"""
High-Throughput Models for EvoApprox 16-Bit Signed multipliers (mul16s_*)
This file is automatically generated.
"""
import torch


def mul16s_gqu(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul16s_GQU
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func((op1 % 2.0), op2, **kwargs)
    return res


def mul16s_gqv(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul16s_GQV
    """
    res = base_func(op1, op2, **kwargs)
    res -= 0.5 * base_func(torch.ones_like(op1), (op2 % 2.0), **kwargs)
    res -= base_func((op1 % 2.0), op2, **kwargs)
    res -= 0.5 * base_func(torch.ones_like(op1), (op2 % 2.0) ** 2, **kwargs)
    return res


def mul16s_gru(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul16s_GRU
    """
    res = base_func(op1, op2, **kwargs)
    res += 0.1 * base_func((op1 % 4.0), torch.ones_like(op2), **kwargs)
    res -= 7.6 * base_func(torch.ones_like(op1), (op2 % 4.0), **kwargs)
    res -= base_func((op1 % 4.0), op2, **kwargs)
    res -= 0.1 * base_func((op1 % 4.0), (op2 % 4.0), **kwargs)
    return res


def mul16s_gsm(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul16s_GSM
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func((op1 % 8.0), op2, **kwargs)
    return res


def mul16s_gv3(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul16s_GV3
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func((op1 % 64.0), op2, **kwargs)
    return res


def mul16s_hf7(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul16s_HF7
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func(op1, (op2 % 2.0), **kwargs)
    res -= base_func((op1 % 2.0), op2, **kwargs)
    res += base_func((op1 % 2.0), (op2 % 2.0), **kwargs)
    return res


def mul16s_hfb(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul16s_HFB
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func(op1, (op2 % 8.0), **kwargs)
    res -= base_func((op1 % 8.0), op2, **kwargs)
    res += base_func((op1 % 8.0), (op2 % 8.0), **kwargs)
    return res


def mul16s_hg4(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul16s_HG4
    """
    res = base_func(op1, op2, **kwargs)
    return res


def mul16s_hg8(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul16s_HG8
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func(op1, (op2 % 4.0), **kwargs)
    res -= base_func((op1 % 4.0), op2, **kwargs)
    res += base_func((op1 % 4.0), (op2 % 4.0), **kwargs)
    return res


htp_models_mul16s = {
    "accurate": mul16s_hg4,
    "mul16s_GQU": mul16s_gqu,
    "mul16s_GQV": mul16s_gqv,
    "mul16s_GRU": mul16s_gru,
    "mul16s_GSM": mul16s_gsm,
    "mul16s_GV3": mul16s_gv3,
    "mul16s_HF7": mul16s_hf7,
    "mul16s_HFB": mul16s_hfb,
    "mul16s_HG4": mul16s_hg4,
    "mul16s_HG8": mul16s_hg8,
}
