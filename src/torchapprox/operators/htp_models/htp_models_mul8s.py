# pylint: disable=duplicate-code
"""
High-Throughput Models for EvoApprox 8-Bit Signed multipliers (mul8s_*)
This file is automatically generated.
"""
import torch


def mul8s_1kv6(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul8s_1KV6
    """
    res = base_func(op1, op2, **kwargs)
    return res


def mul8s_1kv8(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul8s_1KV8
    """
    res = base_func(op1, op2, **kwargs)
    res -= 0.2 * base_func((op1 % 4.0), torch.ones_like(op2), **kwargs)
    res -= 0.2 * base_func(torch.ones_like(op1), (op2 % 4.0), **kwargs)
    res -= 0.4 * base_func((op1 % 4.0), (op2 % 4.0), **kwargs)
    return res


def mul8s_1kv9(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul8s_1KV9
    """
    res = base_func(op1, op2, **kwargs)
    res -= 0.4 * base_func((op1 % 4.0), torch.ones_like(op2), **kwargs)
    res -= 0.4 * base_func(torch.ones_like(op1), (op2 % 4.0), **kwargs)
    res -= base_func((op1 % 4.0), (op2 % 4.0), **kwargs)
    return res


def mul8s_1kva(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul8s_1KVA
    """
    res = base_func(op1, op2, **kwargs)
    res -= 0.7 * base_func((op1 % 8.0), torch.ones_like(op2), **kwargs)
    res -= 0.7 * base_func(torch.ones_like(op1), (op2 % 8.0), **kwargs)
    res -= 0.4 * base_func((op1 % 8.0), (op2 % 8.0), **kwargs)
    return res


def mul8s_1kvm(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul8s_1KVM
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func((op1 % 2.0), op2, **kwargs)
    return res


def mul8s_1kvp(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul8s_1KVP
    """
    res = base_func(op1, op2, **kwargs)
    res -= 1.5 * base_func(torch.ones_like(op1), (op2 % 2.0), **kwargs)
    res -= base_func((op1 % 2.0), op2, **kwargs)
    res -= 1.5 * base_func(torch.ones_like(op1), (op2 % 2.0) ** 2, **kwargs)
    return res


def mul8s_1kvq(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul8s_1KVQ
    """
    res = base_func(op1, op2, **kwargs)
    res -= 3.5 * base_func(torch.ones_like(op1), (op2 % 2.0), **kwargs)
    res -= base_func((op1 % 2.0), op2, **kwargs)
    res -= 3.5 * base_func(torch.ones_like(op1), (op2 % 2.0) ** 2, **kwargs)
    return res


def mul8s_1kx5(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul8s_1KX5
    """
    res = base_func(op1, op2, **kwargs)
    res -= 7.6 * base_func(torch.ones_like(op1), (op2 % 4.0), **kwargs)
    res -= base_func((op1 % 4.0), op2, **kwargs)
    return res


def mul8s_1kxf(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul8s_1KXF
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func((op1 % 8.0), op2, **kwargs)
    return res


def mul8s_1l12(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul8s_1L12
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func((op1 % 64.0), op2, **kwargs)
    return res


def mul8s_1l2j(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul8s_1L2J
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func(op1, (op2 % 2.0), **kwargs)
    res -= base_func((op1 % 2.0), op2, **kwargs)
    res += base_func((op1 % 2.0), (op2 % 2.0), **kwargs)
    return res


def mul8s_1l2l(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul8s_1L2L
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func(op1, (op2 % 4.0), **kwargs)
    res -= base_func((op1 % 4.0), op2, **kwargs)
    res += base_func((op1 % 4.0), (op2 % 4.0), **kwargs)
    return res


def mul8s_1l2n(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul8s_1L2N
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func(op1, (op2 % 8.0), **kwargs)
    res -= base_func((op1 % 8.0), op2, **kwargs)
    res += base_func((op1 % 8.0), (op2 % 8.0), **kwargs)
    return res


htp_models_mul8s = {
    "accurate": mul8s_1kv6,
    "mul8s_1KV6": mul8s_1kv6,
    "mul8s_1KV8": mul8s_1kv8,
    "mul8s_1KV9": mul8s_1kv9,
    "mul8s_1KVA": mul8s_1kva,
    "mul8s_1KVM": mul8s_1kvm,
    "mul8s_1KVP": mul8s_1kvp,
    "mul8s_1KVQ": mul8s_1kvq,
    "mul8s_1KX5": mul8s_1kx5,
    "mul8s_1KXF": mul8s_1kxf,
    "mul8s_1L12": mul8s_1l12,
    "mul8s_1L2J": mul8s_1l2j,
    "mul8s_1L2L": mul8s_1l2l,
    "mul8s_1L2N": mul8s_1l2n,
}
