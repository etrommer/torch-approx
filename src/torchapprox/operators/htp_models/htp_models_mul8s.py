"""
High-Throughput Models for EvoApprox 8-Bit Signed multipliers (mul8s_*)
This file is automatically generated.
"""
import torch


def htp_mul8s_1kv6(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for htp_mul8s_1KV6
    """
    res = base_func(op1, op2, **kwargs)
    return res


def lin_mul8s_1kv6(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for lin_mul8s_1KV6
    """
    res = 0.9999999999999984 * base_func(op1, op2, **kwargs)
    res -= 0.0 * 1
    res += 8.215650382226158e-15 * base_func(op1, torch.ones_like(op2), **kwargs)
    res -= 7.127111401050712e-15 * base_func(torch.ones_like(op1), op2, **kwargs)
    res -= 1.1102230246251565e-16 * base_func(op1**2, torch.ones_like(op2), **kwargs)
    res -= 1.1102230246251565e-16 * base_func(torch.ones_like(op1), op2**2, **kwargs)
    return res


def htp_mul8s_1kv8(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for htp_mul8s_1KV8
    """
    res = base_func(op1, op2, **kwargs)
    res -= 0.2 * base_func((op1 % 4.0), torch.ones_like(op2), **kwargs)
    res -= 0.2 * base_func(torch.ones_like(op1), (op2 % 4.0), **kwargs)
    res -= 0.4 * base_func((op1 % 4.0), (op2 % 4.0), **kwargs)
    return res


def lin_mul8s_1kv8(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for lin_mul8s_1KV8
    """
    res = 0.999999981140141 * base_func(op1, op2, **kwargs)
    res -= 0.0 * 1
    res -= 0.00016022915984093 * base_func(op1, torch.ones_like(op2), **kwargs)
    res -= 0.0001602291598666863 * base_func(torch.ones_like(op1), op2, **kwargs)
    res -= 0.0 * base_func(op1**2, torch.ones_like(op2), **kwargs)
    res -= 0.0 * base_func(torch.ones_like(op1), op2**2, **kwargs)
    return res


def htp_mul8s_1kv9(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for htp_mul8s_1KV9
    """
    res = base_func(op1, op2, **kwargs)
    res -= 0.4 * base_func((op1 % 4.0), torch.ones_like(op2), **kwargs)
    res -= 0.4 * base_func(torch.ones_like(op1), (op2 % 4.0), **kwargs)
    res -= base_func((op1 % 4.0), (op2 % 4.0), **kwargs)
    return res


def lin_mul8s_1kv9(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for lin_mul8s_1KV9
    """
    res = 0.9999998805542331 * base_func(op1, op2, **kwargs)
    res -= 0.0 * 1
    res -= 0.0008011583724520932 * base_func(op1, torch.ones_like(op2), **kwargs)
    res -= 0.0008011583724626516 * base_func(torch.ones_like(op1), op2, **kwargs)
    res -= 2.7755575615628914e-16 * base_func(op1**2, torch.ones_like(op2), **kwargs)
    res -= 2.220446049250313e-16 * base_func(torch.ones_like(op1), op2**2, **kwargs)
    return res


def htp_mul8s_1kva(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for htp_mul8s_1KVA
    """
    res = base_func(op1, op2, **kwargs)
    res -= 0.7 * base_func((op1 % 8.0), torch.ones_like(op2), **kwargs)
    res -= 0.7 * base_func(torch.ones_like(op1), (op2 % 8.0), **kwargs)
    res -= 0.4 * base_func((op1 % 8.0), (op2 % 8.0), **kwargs)
    return res


def lin_mul8s_1kva(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for lin_mul8s_1KVA
    """
    res = 0.9999993440960587 * base_func(op1, op2, **kwargs)
    res -= 0.0 * 1
    res -= 0.0035480505429330567 * base_func(op1, torch.ones_like(op2), **kwargs)
    res -= 0.0035480505429790173 * base_func(torch.ones_like(op1), op2, **kwargs)
    res -= 1.6653345369377348e-16 * base_func(op1**2, torch.ones_like(op2), **kwargs)
    res -= 2.220446049250313e-16 * base_func(torch.ones_like(op1), op2**2, **kwargs)
    return res


def htp_mul8s_1kvm(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for htp_mul8s_1KVM
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func((op1 % 2.0), op2, **kwargs)
    return res


def lin_mul8s_1kvm(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for lin_mul8s_1KVM
    """
    res = 0.9999542229343092 * base_func(op1, op2, **kwargs)
    res -= 0.0 * 1
    res -= 2.220446049250313e-15 * base_func(op1, torch.ones_like(op2), **kwargs)
    res -= 0.5000228885328569 * base_func(torch.ones_like(op1), op2, **kwargs)
    res -= 0.0 * base_func(op1**2, torch.ones_like(op2), **kwargs)
    res -= 5.551115123125783e-17 * base_func(torch.ones_like(op1), op2**2, **kwargs)
    return res


def htp_mul8s_1kvp(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for htp_mul8s_1KVP
    """
    res = base_func(op1, op2, **kwargs)
    res -= 1.5 * base_func(torch.ones_like(op1), (op2 % 2.0), **kwargs)
    res -= base_func((op1 % 2.0), op2, **kwargs)
    res -= 1.5 * base_func(torch.ones_like(op1), (op2 % 2.0) ** 2, **kwargs)
    return res


def lin_mul8s_1kvp(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for lin_mul8s_1KVP
    """
    res = 0.9999541474948779 * base_func(op1, op2, **kwargs)
    res -= 0.0 * 1
    res -= 0.0006409166393643861 * base_func(op1, torch.ones_like(op2), **kwargs)
    res -= 0.5003433657124199 * base_func(torch.ones_like(op1), op2, **kwargs)
    res += 5.551115123125783e-17 * base_func(op1**2, torch.ones_like(op2), **kwargs)
    res -= 0.0 * base_func(torch.ones_like(op1), op2**2, **kwargs)
    return res


def htp_mul8s_1kvq(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for htp_mul8s_1KVQ
    """
    res = base_func(op1, op2, **kwargs)
    res -= 3.5 * base_func(torch.ones_like(op1), (op2 % 2.0), **kwargs)
    res -= base_func((op1 % 2.0), op2, **kwargs)
    res -= 3.5 * base_func(torch.ones_like(op1), (op2 % 2.0) ** 2, **kwargs)
    return res


def lin_mul8s_1kvq(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for lin_mul8s_1KVQ
    """
    res = 0.9999537451512474 * base_func(op1, op2, **kwargs)
    res -= 0.0 * 1
    res -= 0.003204633489829356 * base_func(op1, torch.ones_like(op2), **kwargs)
    res -= 0.5016253247235536 * base_func(torch.ones_like(op1), op2, **kwargs)
    res += 5.551115123125783e-17 * base_func(op1**2, torch.ones_like(op2), **kwargs)
    res -= 0.0 * base_func(torch.ones_like(op1), op2**2, **kwargs)
    return res


def htp_mul8s_1kx5(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for htp_mul8s_1KX5
    """
    res = base_func(op1, op2, **kwargs)
    res -= 7.6 * base_func(torch.ones_like(op1), (op2 % 4.0), **kwargs)
    res -= base_func((op1 % 4.0), op2, **kwargs)
    return res


def lin_mul8s_1kx5(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for lin_mul8s_1KX5
    """
    res = 0.999769203539302 * base_func(op1, op2, **kwargs)
    res -= 0.0 * 1
    res -= 0.012818533959346623 * base_func(op1, torch.ones_like(op2), **kwargs)
    res -= 1.5033197928286879 * base_func(torch.ones_like(op1), op2, **kwargs)
    res += 1.6653345369377348e-16 * base_func(op1**2, torch.ones_like(op2), **kwargs)
    res -= 1.1102230246251565e-16 * base_func(torch.ones_like(op1), op2**2, **kwargs)
    return res


def htp_mul8s_1kxf(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for htp_mul8s_1KXF
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func((op1 % 8.0), op2, **kwargs)
    return res


def lin_mul8s_1kxf(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for lin_mul8s_1KXF
    """
    res = 0.999038681620507 * base_func(op1, op2, **kwargs)
    res -= 0.0 * 1
    res -= 9.547918011776346e-15 * base_func(op1, torch.ones_like(op2), **kwargs)
    res -= 3.50048065918978 * base_func(torch.ones_like(op1), op2, **kwargs)
    res -= 2.220446049250313e-16 * base_func(op1**2, torch.ones_like(op2), **kwargs)
    res += 6.661338147750939e-16 * base_func(torch.ones_like(op1), op2**2, **kwargs)
    return res


def htp_mul8s_1l12(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for htp_mul8s_1L12
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func((op1 % 64.0), op2, **kwargs)
    return res


def lin_mul8s_1l12(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for lin_mul8s_1L12
    """
    res = 0.9375143053330248 * base_func(op1, op2, **kwargs)
    res -= 0.0 * 1
    res -= 2.220446049250313e-16 * base_func(op1, torch.ones_like(op2), **kwargs)
    res -= 31.53124284733363 * base_func(torch.ones_like(op1), op2, **kwargs)
    res += 6.106226635438361e-16 * base_func(op1**2, torch.ones_like(op2), **kwargs)
    res += 2.3869795029440866e-15 * base_func(torch.ones_like(op1), op2**2, **kwargs)
    return res


def htp_mul8s_1l2j(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for htp_mul8s_1L2J
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func(op1, (op2 % 2.0), **kwargs)
    res -= base_func((op1 % 2.0), op2, **kwargs)
    res += base_func((op1 % 2.0), (op2 % 2.0), **kwargs)
    return res


def lin_mul8s_1l2j(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for lin_mul8s_1L2J
    """
    res = 0.9999084479641578 * base_func(op1, op2, **kwargs)
    res -= 0.0 * 1
    res -= 0.4999999989522127 * base_func(op1, torch.ones_like(op2), **kwargs)
    res -= 0.4999999989522636 * base_func(torch.ones_like(op1), op2, **kwargs)
    res -= 2.220446049250313e-16 * base_func(op1**2, torch.ones_like(op2), **kwargs)
    res -= 2.220446049250313e-16 * base_func(torch.ones_like(op1), op2**2, **kwargs)
    return res


def htp_mul8s_1l2l(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for htp_mul8s_1L2L
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func(op1, (op2 % 4.0), **kwargs)
    res -= base_func((op1 % 4.0), op2, **kwargs)
    res += base_func((op1 % 4.0), (op2 % 4.0), **kwargs)
    return res


def lin_mul8s_1l2l(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for lin_mul8s_1L2L
    """
    res = 0.9995422817315912 * base_func(op1, op2, **kwargs)
    res -= 0.0 * 1
    res -= 1.4997710884772864 * base_func(op1, torch.ones_like(op2), **kwargs)
    res -= 1.499771088477327 * base_func(torch.ones_like(op1), op2, **kwargs)
    res -= 2.220446049250313e-16 * base_func(op1**2, torch.ones_like(op2), **kwargs)
    res -= 2.220446049250313e-16 * base_func(torch.ones_like(op1), op2**2, **kwargs)
    return res


def htp_mul8s_1l2n(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for htp_mul8s_1L2N
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func(op1, (op2 % 8.0), **kwargs)
    res -= base_func((op1 % 8.0), op2, **kwargs)
    res += base_func((op1 % 8.0), (op2 % 8.0), **kwargs)
    return res


def lin_mul8s_1l2n(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for lin_mul8s_1L2N
    """
    res = 0.9980782873740415 * base_func(op1, op2, **kwargs)
    res -= 0.0 * 1
    res -= 3.497115582795007 * base_func(op1, torch.ones_like(op2), **kwargs)
    res -= 3.4971155827950553 * base_func(torch.ones_like(op1), op2, **kwargs)
    res -= 0.0 * base_func(op1**2, torch.ones_like(op2), **kwargs)
    res -= 0.0 * base_func(torch.ones_like(op1), op2**2, **kwargs)
    return res


htp_models_mul8s = {
    "accurate": htp_mul8s_1kv6,
    "htp_mul8s_1KV6": htp_mul8s_1kv6,
    "lin_mul8s_1KV6": lin_mul8s_1kv6,
    "htp_mul8s_1KV8": htp_mul8s_1kv8,
    "lin_mul8s_1KV8": lin_mul8s_1kv8,
    "htp_mul8s_1KV9": htp_mul8s_1kv9,
    "lin_mul8s_1KV9": lin_mul8s_1kv9,
    "htp_mul8s_1KVA": htp_mul8s_1kva,
    "lin_mul8s_1KVA": lin_mul8s_1kva,
    "htp_mul8s_1KVM": htp_mul8s_1kvm,
    "lin_mul8s_1KVM": lin_mul8s_1kvm,
    "htp_mul8s_1KVP": htp_mul8s_1kvp,
    "lin_mul8s_1KVP": lin_mul8s_1kvp,
    "htp_mul8s_1KVQ": htp_mul8s_1kvq,
    "lin_mul8s_1KVQ": lin_mul8s_1kvq,
    "htp_mul8s_1KX5": htp_mul8s_1kx5,
    "lin_mul8s_1KX5": lin_mul8s_1kx5,
    "htp_mul8s_1KXF": htp_mul8s_1kxf,
    "lin_mul8s_1KXF": lin_mul8s_1kxf,
    "htp_mul8s_1L12": htp_mul8s_1l12,
    "lin_mul8s_1L12": lin_mul8s_1l12,
    "htp_mul8s_1L2J": htp_mul8s_1l2j,
    "lin_mul8s_1L2J": lin_mul8s_1l2j,
    "htp_mul8s_1L2L": htp_mul8s_1l2l,
    "lin_mul8s_1L2L": lin_mul8s_1l2l,
    "htp_mul8s_1L2N": htp_mul8s_1l2n,
    "lin_mul8s_1L2N": lin_mul8s_1l2n,
}
