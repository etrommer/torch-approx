# pylint: disable=duplicate-code
"""
High-Throughput Models for EvoApprox 12-Bit Signed multipliers (mul12s_*)
This file is automatically generated.
"""
import torch


def mul12s_2pp(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul12s_2PP
    """
    res = base_func(op1, op2, **kwargs)
    return res


def mul12s_2pq(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul12s_2PQ
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func((op1 % 2.0), (op2 % 2.0), **kwargs)
    return res


def mul12s_2pr(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul12s_2PR
    """
    res = base_func(op1, op2, **kwargs)
    res -= 0.2 * base_func((op1 % 4.0), torch.ones_like(op2), **kwargs)
    res -= 0.2 * base_func(torch.ones_like(op1), (op2 % 4.0), **kwargs)
    res -= 0.4 * base_func((op1 % 4.0), (op2 % 4.0), **kwargs)
    return res


def mul12s_2ps(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul12s_2PS
    """
    res = base_func(op1, op2, **kwargs)
    res -= 0.4 * base_func((op1 % 4.0), torch.ones_like(op2), **kwargs)
    res -= 0.4 * base_func(torch.ones_like(op1), (op2 % 4.0), **kwargs)
    res -= base_func((op1 % 4.0), (op2 % 4.0), **kwargs)
    return res


def mul12s_2pt(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul12s_2PT
    """
    res = base_func(op1, op2, **kwargs)
    res -= 0.7 * base_func((op1 % 8.0), torch.ones_like(op2), **kwargs)
    res -= 0.7 * base_func(torch.ones_like(op1), (op2 % 8.0), **kwargs)
    res -= 0.4 * base_func((op1 % 8.0), (op2 % 8.0), **kwargs)
    return res


def mul12s_2qd(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul12s_2QD
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func((op1 % 2.0), op2, **kwargs)
    return res


def mul12s_2qe(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul12s_2QE
    """
    res = base_func(op1, op2, **kwargs)
    res -= 0.5 * base_func(torch.ones_like(op1), (op2 % 2.0), **kwargs)
    res -= base_func((op1 % 2.0), op2, **kwargs)
    res -= 0.5 * base_func(torch.ones_like(op1), (op2 % 2.0) ** 2, **kwargs)
    return res


def mul12s_2qh(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul12s_2QH
    """
    res = base_func(op1, op2, **kwargs)
    res -= 7.5 * base_func(torch.ones_like(op1), (op2 % 2.0), **kwargs)
    res -= base_func((op1 % 2.0), op2, **kwargs)
    res -= 7.5 * base_func(torch.ones_like(op1), (op2 % 2.0) ** 2, **kwargs)
    return res


def mul12s_2r5(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul12s_2R5
    """
    res = base_func(op1, op2, **kwargs)
    res -= 7.6 * base_func(torch.ones_like(op1), (op2 % 4.0), **kwargs)
    res -= base_func((op1 % 4.0), op2, **kwargs)
    return res


def mul12s_2rp(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul12s_2RP
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func((op1 % 8.0), op2, **kwargs)
    return res


def mul12s_2te(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul12s_2TE
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func((op1 % 64.0), op2, **kwargs)
    return res


def mul12s_34k(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul12s_34K
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func(op1, (op2 % 2.0), **kwargs)
    res -= base_func((op1 % 2.0), op2, **kwargs)
    res += base_func((op1 % 2.0), (op2 % 2.0), **kwargs)
    return res


def mul12s_34m(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul12s_34M
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func(op1, (op2 % 4.0), **kwargs)
    res -= base_func((op1 % 4.0), op2, **kwargs)
    res += base_func((op1 % 4.0), (op2 % 4.0), **kwargs)
    return res


def mul12s_34p(base_func, op1, op2, kwargs):
    """
    Approximate Multiplication HTP Model for mul12s_34P
    """
    res = base_func(op1, op2, **kwargs)
    res -= base_func(op1, (op2 % 8.0), **kwargs)
    res -= base_func((op1 % 8.0), op2, **kwargs)
    res += base_func((op1 % 8.0), (op2 % 8.0), **kwargs)
    return res


htp_models_mul12s = {
    "accurate": mul12s_2pp,
    "mul12s_2PP": mul12s_2pp,
    "mul12s_2PQ": mul12s_2pq,
    "mul12s_2PR": mul12s_2pr,
    "mul12s_2PS": mul12s_2ps,
    "mul12s_2PT": mul12s_2pt,
    "mul12s_2QD": mul12s_2qd,
    "mul12s_2QE": mul12s_2qe,
    "mul12s_2QH": mul12s_2qh,
    "mul12s_2R5": mul12s_2r5,
    "mul12s_2RP": mul12s_2rp,
    "mul12s_2TE": mul12s_2te,
    "mul12s_34K": mul12s_34k,
    "mul12s_34M": mul12s_34m,
    "mul12s_34P": mul12s_34p,
}
