[tool.poetry]
name = "torchapprox"
version = "0.1.1"
description = "GPU-accelerated Neural Network layers using Approximate Multiplication for PyTorch"
authors = ["Elias Trommer"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.8"
torch = "1.13.0"
poethepoet = "*"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
torchvision = "*"
mypy = "^0.971"
pylint = "^2.15.0"
pytest = "^7.1.2"
pytest-benchmark = "^4.0.0"
pre-commit = "^2.20.0"
pytest-cov = "^3.0.0"

[tool.poetry.group.extras]
optional = true

[tool.poetry.group.extras.dependencies]
furo = "^2022.9.29"
myst-nb = "^0.17.1"
sphinx-autoapi = "^2.0.0"
sphinx-paramlinks = "^0.5.4"

[tool.poe.tasks]
install-ltt = "python3 -m pip install light-the-torch"
run-ltt = "python3 -m light_the_torch install --upgrade torch torchaudio torchvision"
autoinstall-torch-cuda = ["install-ltt", "run-ltt"]

[tool.pytest.ini_options]
testpaths = ["test"]

[tool.pylint.main]
max-line-length = 120
ignore = 'docs'

[tool.pylint.format]
good-names = 'i,j,k,x,y,w,a,b,c'

[tool.pylint.typecheck]
generated-members=['numpy.*', 'torch.*']

[tool.pylint.design]
max-returns = 10
max-args = 6

[tool.isort]
profile = "black"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
