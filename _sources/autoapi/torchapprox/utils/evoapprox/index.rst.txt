:py:mod:`torchapprox.utils.evoapprox`
=====================================

.. py:module:: torchapprox.utils.evoapprox

.. autoapi-nested-parse::

   Utilities for working with the EvoApprox Libray



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   torchapprox.utils.evoapprox.module_names
   torchapprox.utils.evoapprox.attribute
   torchapprox.utils.evoapprox.load_multiplier
   torchapprox.utils.evoapprox.approx_multiplication
   torchapprox.utils.evoapprox.error_map
   torchapprox.utils.evoapprox.error_distribution
   torchapprox.utils.evoapprox.bitwidth_from_name
   torchapprox.utils.evoapprox.signedness_from_name
   torchapprox.utils.evoapprox.lut



.. py:function:: module_names(filter_str: str = '') -> List[str]

   List all available modules in EvoApproxLib

   :param filter_str: Only return moduls whose name contains a certain substring, i.e. `mul8s`. Defaults to "".

   :raises ImportError: Loading of library failed

   :returns: List of (filtered) available module names


.. py:function:: attribute(multiplier_name: str, attr_name: str) -> Any

   Read Attribute from EvoApprox module

   :param multiplier_name: Name of the target multiplier
   :param attr_name: Name of the target attribute

   :returns: Target attribute value


.. py:function:: load_multiplier(multiplier_name)

   Try loading a multiplier module from the EvoApprox library

   :param multiplier_name: String with name of target multiplier

   :raises ImportError: Multiplier module could not be loaded

   :returns: EvoApprox module


.. py:function:: approx_multiplication(multiplier_name, range_x, range_y, signed, bitwidth)

   Calculate approximate multiplication result of supplied
   approximate multiplier along a given range.

   :param multiplier: The `evoapprox` class to evaluate
   :param range_x: Iterable of first operand range
   :param range_y: Iterable of second operand range
   :param signed: Signed or unsigned multiplication
   :param bitwidth: Bitwidth of approximate multiplier

   :returns:

             - 2D Array of the approximate multiplication result across the
               Cartesian product of the supplied input operand ranges
             - 2D Array of x operands
             - 2D Array of y operands
   :rtype: Tuple of


.. py:function:: error_map(multiplier_name: str) -> numpy.ndarray

   Generate the error map for a given multiplier,
   i.e. the difference between accurate and approximate result across the entire input space

   :param multiplier_name: Name for target multiplier

   :returns: Error Map for multiplier input space


.. py:function:: error_distribution(multiplier_name: str, fan_in: int = 1) -> Tuple[Any, Any]

   Calculate the Mean and Standard Deviation of an EvoApprox multiplier

   :param multiplier_name: Name of the desired multiplier, e.g. `mul8s_1KV6`
   :param fan_in: Compensates the reduced standard deviation from repeated sampling
                  when a large number of multiplications is accumulated in a neuron.
                  Defaults to `1`.

   :returns:

             - Mean of the approximate multiplication error, scaled to the neuron output
             - Standard deviation of approximate multiplication error, scaled to the neuron output
   :rtype: Tuple of


.. py:function:: bitwidth_from_name(multiplier_name: str) -> int

   Helper function to extract the bitwidth from a given multiplier name

   :param multiplier_name: Target multiplier name

   :returns: The multipliers bitwidth, i.e. 8 for `mul8s_...`


.. py:function:: signedness_from_name(multiplier_name: str) -> bool

   Helper function to extract the signedness for a given multiplier name

   :param multiplier_name: Target multiplier name

   :returns: The multipliers signedness, i.e. True for `mul8s_...`


.. py:function:: lut(multiplier_name: str) -> numpy.ndarray

   Generate Lookup-Table for supplied EvoApprox multiplier

   :param multiplier_name: Name of the desired multiplier, e.g. `mul8s_1KV6`
   :param bitwidth: Bitwidth of the multiplier.
                    If not supplied, this is inferred from the `multiplier_name`. Defaults to None.
   :param signed: Signedness of the multiplier.
                  If not supplied, this is inferred from the `multiplier_name`. Defaults to None.

   :raises ImportError: Raised if the supplied multiplier name could not be loaded from the evoapprox library.

   :returns: Lookup table of the Approximate Multiplication result across the input operand range.


